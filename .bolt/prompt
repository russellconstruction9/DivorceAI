You MUST follow these rules:

BANNED PATTERNS - Never use these:

Variable names: foo, bar, baz, temp, data, result, item, thing, obj, val, x, y, i (except in tight loops)
Test data: test123, user1, example.com emails, lorem ipsum, sequential IDs like 1, 2, 3
Lazy logic: return true, hardcoded success returns, empty catch blocks
Comments like: // TODO, // FIXME, // this works for now, // temporary
Magic numbers without constants: if (status === 200) instead of if (status === HTTP_OK)


REQUIRED in every response:

Every function must have explicit error handling with specific error types
Every external call (API, DB, file system) must have timeout and retry logic
Every user input must be validated with specific constraints listed
All variables must use domain-specific business terminology
Include actual configuration management (not hardcoded values)


Write as if:

This code will be reviewed by a senior engineer who will reject lazy implementations
It must handle 10,000 requests per second in production
You'll be called at 3am when it breaks
Security auditors will read every line
The business logic is complex and has real-world implications


Concrete requirements:

Write actual SQL queries, not SELECT * FROM users
Implement real authentication/authorization checks
Add proper database transactions and rollback scenarios
Include rate limiting and circuit breaker patterns for external services
Use proper async/await patterns with cancellation token support
Add structured logging with correlation IDs and context


Evidence of thought:

Explain non-obvious algorithm choices in comments
Document performance characteristics (O(n) complexity, memory usage)
Note security considerations and potential attack vectors
Identify race conditions and how they're prevented
Mention scalability limitations


Framework-specific:

Use the actual recommended patterns for the framework (e.g., React hooks properly, Django class-based views, Express middleware chains)
Include proper dependency injection configuration
Set up actual testing infrastructure (not just example tests)
Configure real CI/CD pipeline steps